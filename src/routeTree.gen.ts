/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CreateRouteImport } from './routes/create'
import { Route as CommunitiesRouteImport } from './routes/communities'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostPostIdRouteImport } from './routes/post.$postId'
import { Route as CommunityCreateRouteImport } from './routes/community.create'
import { Route as CommunityCommunityIdRouteImport } from './routes/community.$communityId'

const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesRoute = CommunitiesRouteImport.update({
  id: '/communities',
  path: '/communities',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostPostIdRoute = PostPostIdRouteImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityCreateRoute = CommunityCreateRouteImport.update({
  id: '/community/create',
  path: '/community/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityCommunityIdRoute = CommunityCommunityIdRouteImport.update({
  id: '/community/$communityId',
  path: '/community/$communityId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/create': typeof CreateRoute
  '/community/$communityId': typeof CommunityCommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/create': typeof CreateRoute
  '/community/$communityId': typeof CommunityCommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/create': typeof CreateRoute
  '/community/$communityId': typeof CommunityCommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/post/$postId': typeof PostPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/communities'
    | '/create'
    | '/community/$communityId'
    | '/community/create'
    | '/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/communities'
    | '/create'
    | '/community/$communityId'
    | '/community/create'
    | '/post/$postId'
  id:
    | '__root__'
    | '/'
    | '/communities'
    | '/create'
    | '/community/$communityId'
    | '/community/create'
    | '/post/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunitiesRoute: typeof CommunitiesRoute
  CreateRoute: typeof CreateRoute
  CommunityCommunityIdRoute: typeof CommunityCommunityIdRoute
  CommunityCreateRoute: typeof CommunityCreateRoute
  PostPostIdRoute: typeof PostPostIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities': {
      id: '/communities'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/create': {
      id: '/community/create'
      path: '/community/create'
      fullPath: '/community/create'
      preLoaderRoute: typeof CommunityCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/$communityId': {
      id: '/community/$communityId'
      path: '/community/$communityId'
      fullPath: '/community/$communityId'
      preLoaderRoute: typeof CommunityCommunityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunitiesRoute: CommunitiesRoute,
  CreateRoute: CreateRoute,
  CommunityCommunityIdRoute: CommunityCommunityIdRoute,
  CommunityCreateRoute: CommunityCreateRoute,
  PostPostIdRoute: PostPostIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
